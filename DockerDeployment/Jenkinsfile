pipeline {
    agent any
    options {
        timeout(time: 1, unit: 'DAYS')
        disableConcurrentBuilds()
    }
    stages {
        stage("Init") {
            agent any
            steps { initialize() }
        }
        stage("Check for Docker") {
            agent any
            steps { checkDocker() }
        }
        stage("Build node-info") {
            agent any
            steps { buildNodeInfo() }
        }
        stage("Build Docker Image") {
            agent any
            steps { runWithDocker() }
        }
        stage("doTests") {
            agent any
            steps { runUnitTests() }
        }
    }
    post {
        always {
            sh 'docker stop node-info-container'
            sh 'docker rm -f node-info-container'
        }
    }
}
def initialize() {
    def dockerHome = tool 'myDocker'
    env.PATH = "${dockerHome}/bin:${env.PATH}"
    env.SYSTEM_NAME = "DSO"
    env.AWS_REGION = "us-east-1"
    showEnvironmentVariables()
}
def showEnvironmentVariables() {
    sh 'env | sort > env.txt'
    sh 'cat env.txt'
}
def checkDocker() {
    sh 'docker -v > docker.txt'
    sh 'cat docker.txt'
}
def buildNodeInfo() {
    def mvnHome = tool 'M3'
    sh "'${mvnHome}/bin/mvn' clean package"
}
def runWithDocker() {
    sh 'docker build --tag=node-info DockerDeployment'
    sh 'docker run -p 8888:8080 -d --name node-info-container node-info'
    sleep 30
    sh 'curl -s http://192.168.2.112:8888/node-info/'
}
def runUnitTests() {
}